--[[
@copyright: fantasysky 2016
@website: https://www.fsky.pro
@brief: array functions for table
@author: fanky
@version: 1.0
@date: 2021-04-25
--]]

-- 必须保证传入的 table 不带显式小标

local array = {
	NIL = {}
}

-- 遍历数组表
-- func = function(index, elem)
function array.travel(arr, func) 
	for i = 1, #arr do
		func(i, arr[i])
	end
end

-- 查找指定值在数组表中的索引
-- 如果元素存在，则返回元素所在表的索引，否则返回 0
function array.index(arr, value)
	for i = 1, #arr do
		if arr[i] == value then
			return i
		end
	end
	return 0
end

-- 判断指定值是否在表中
function array.hasvalue(arr, value)
	for i = 0, #arr do
		if arr[i] == value then
			return true
		end
	end
	return false
end

-- 删除数组表中第一个出现的元素
-- 如果删除成功则返回 true，如果元素不存在，则返回 false
function array.remove(arr, value) 
	for i = 0, #arr do
		if arr[i] == value then
			table.remove(arr, i)
			return true
		end
	end
	return false
end

-- 删除表中所有值为 value 的元素
function array.removeall(arr, value)
	table.remove(arr, value)
end

-- 在指定索引前面插入元素，支持负索引 -1 表示最后一个元素
function array.insert(arr, index, value)
	local count = #arr
	-- 插入最后面
	if index > count then
		table.insert(arr, value)
		return
	end

	-- 负索引
	if index < 0 then
		index = count + 1 + index
	end
	if index < 0 then
		index = 0 
	end

	for i = count, 1, -1 do
		if i >= index then
			arr[i+1] = arr[i]
		else
			arr[i+1] = value
			return
		end
	end
	arr[1] = value
end

-- 在数组表的最前面插入一个元素
function array.pushfront(arr, value)
	array.insert(arr, 0, value)
end

-- 移除数组表最前面的元素，并返回该元素，如果数组表为空，则返回 array.NIL
function array.popfront(arr)
	local count = #arr
	if count == 0 then
		return array.NIL
	end
	value = arr[1]
	for i = 1, count do
		arr[i] = arr[i+1]
	end
	return value
end

-- 在数组表尾部插入元素
function array.pushback(arr, value)
	table.insert(arr, value)
end

-- 跳出数组表最后一个元素，如果 table 为空，则返回 array.NIL，否则返回最后一个元素
function array.popback(arr)
	if #arr == 0 then
		return array.NIL
	end
	local value = arr[#arr]
	arr[#arr] = nil
	return value
end


------------------------------------------------------------
-- 获取指定区域的子数组
function array.slice(arr, first, last)
	count = #arr
	if first < 0 then 
		first = count - 1 + first
		if first <= 0 then
			first = 1
		end
	end
	if last < 0 then
		last = count -1 + last
		if last <= 0 then
			last = 1
		end
	end
	if first == last then 
		return {}
	end
	if first > last then
		first, last = last, first
	end
	if first > count then
		return {}
	end
	if last > count then
		last = count
	end

	local newarr = {1}
	local index = 1
	for i = first, last do
		newarr[index] = arr[i]
		index = index + 1
	end
	return newarr
end

-- 将数组表 arr2 的所有元素追加到 arr1 的后面
function array.concat(arr1, arr2)
	local index = #arr1 + 1
	for i = 1, #arr2 do
		arr[index] = arr2[i]
		index = index + 1
	end
end

return array
